#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const childProcess = require("child_process");

const packageName = `@zap.org/${process.platform}-${process.arch}`;

BIN_NAME = process.platform === "win32" ? "zap.exe" : "zap";

let modulePath = "";

try {
  modulePath = require.resolve(packageName + "/package.json");
} catch (err) {
  if (err.code !== "MODULE_NOT_FOUND") {
    console.error(err.message);
  }
}

if (!modulePath) {
  console.error(
    `Error: Could not locate ${packageName}.\n` +
      "\n" +
      `Either your current architecture (${process.platform}-${process.arch}) is not supported, or the package is not installed.\n` +
      "Make sure that your package manager is not ignoring optional dependencies.\n"
  );
  process.exit(1);
}

// The actual binary is located in the [platform]-[arch] package's bin directory.
const binaryPath = path.join(path.dirname(modulePath), "bin", BIN_NAME);

// Attempt to replace this node.js script with the binary.
try {
  const targetPath = path.join(__dirname, BIN_NAME);
  const intermediatePath = path.join(__dirname, "zap.bin");

  // Make the binary executable.
  fs.chmodSync(binaryPath, 0o755);
  // Remove any existing intermediate file.
  fs.rmSync(intermediatePath, { force: true });
  // Create a hard link to the binary.
  fs.linkSync(binaryPath, intermediatePath);
  // Atomically replace this script with the binary.
  fs.renameSync(intermediatePath, targetPath);
} catch (err) {
  /* silently swallow errors */
}

const args = process.argv.slice(2);

childProcess.execFileSync(binaryPath, args, {
  stdio: "inherit",
});
