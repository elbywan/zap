require "json"

# See: https://yarnpkg.com/advanced/pnp-spec#manifest-reference
struct Zap::Installer::PnP::Manifest
  include JSON::Serializable

  getter __info : Array(String) = [
    "This file is automatically generated. Do not touch it, or risk",
    "your modifications being lost.",
  ]

  @[JSON::Field(key: "dependencyTreeRoots")]
  getter dependency_tree_roots : Array({name: String, reference: String}) = Array({name: String, reference: String}).new
  @[JSON::Field(key: "ignorePatternData")]
  getter ignore_pattern_data : String? = "(^(?:\\.yarn\\/sdks(?:\\/(?!\\.{1,2}(?:\\/|$))(?:(?:(?!(?:^|\\/)\\.{1,2}(?:\\/|$)).)*?)|$))$)"
  @[JSON::Field(key: "enableTopLevel")]
  getter enable_top_level_fallback : Bool = true
  @[JSON::Field(key: "fallbackPool")]
  getter fallback_pool : Array({String, String}) = Array({String, String}).new
  @[JSON::Field(key: "fallbackExclusionList")]
  getter fallback_exclusion_list : Array({String, Array(String)}) = Array({String, Array(String)}).new
  @[JSON::Field(key: "packageRegistryData")]
  getter package_registry_data : PackageRegistryData = PackageRegistryData.new

  def initialize
  end

  # tuple means that this is an alias

  struct Data
    include JSON::Serializable

    struct PackageDependency
      alias PackageReference = String | {String, String}

      getter name : String
      getter reference : PackageReference?

      def initialize(@name, @reference); end

      def initialize(pull : ::JSON::PullParser)
        name, reference = Tuple(String, PackageReference?).new(pull)
        @name = name
        @reference = reference
      end

      def to_json(json : JSON::Builder)
        {name, reference}.to_json(json)
      end
    end

    @[JSON::Field(key: "packageLocation")]
    getter package_location : String
    @[JSON::Field(key: "packageDependencies")]
    getter package_dependencies : Array(PackageDependency)
    @[JSON::Field(key: "linkType")]
    getter link_type : String
    @[JSON::Field(key: "discardFromLookup")]
    getter discard_from_lookup : Bool? = nil
    @[JSON::Field(key: "packagePeers")]
    getter package_peers : Array(String)? = nil

    def initialize(
      @package_location,
      @package_dependencies = Array(PackageDependency).new,
      @link_type = "HARD",
      @discard_from_lookup = nil,
      @package_peers = nil
    )
    end
  end

  struct PackageRegistryData
    getter data : Hash(String?, Array({String?, Data})) = Hash(String?, Array({String?, Data})).new

    def initialize
    end

    def initialize(@data)
    end

    def self.new(pull : ::JSON::PullParser)
      self.new(
        Array({String?, Array({String?, Data})}).new(pull).to_h
      )
    end

    def to_json(json : JSON::Builder)
      data.to_a.map { |k, v| {k, v} }.sort { |a, b|
        cmp = a[0].to_s <=> b[0].to_s
        next cmp if cmp != 0
        a[1].map { |(k, v)| k.to_s } <=> b[1].map { |(k, v)| k.to_s }
      }.to_json(json)
    end

    def add_package_data(name : String?, reference : String?, data : Data, *, overwrite : Bool = true)
      element = {reference, data}
      references = @data[name] ||= Array({String?, Data}).new
      references.reject! { |(ref, _)| ref == reference } if overwrite
      references << element
    end
  end
end
